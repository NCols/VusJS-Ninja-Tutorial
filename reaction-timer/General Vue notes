In .vue files, template is required, but styles and scripts are not.

Each .vue file contains templates, that are to be inserted inside our index.html at some point.

So we split up our tempaltes into different components (like App.vue), for different parts of our application.

Each component has its own template at the top. Each component must have 1 root <template> element at the top. Note: this is not an html tag.

When downloading a Vue project, f.ex. from Github, we have to install dependencies first. For that, we open up a terminal and just type 'npm install'. This will install all the dependencies present in package.json.

To manage complexity, we will need to create multiple separate components, like a menu bar, a side bar, a widget, etc.

App.vue is always the root component. This one is initially mounted to the dom. All the other components that we create will be nested inside this one. For ex Header.vue, Articles.vue, Footer.vue. We can have components nested in sub-components.

Component Tree
-> Parent component
    -> Child component

Props:
Pass data from App.vue to components.
We return data via data () in export in App.vue. This data is passed to the App.vue template. In the template, we pass the data via bindings to the component. In the component, we take the props and export them to the template where they are accessible via {{}}

Event modifiers: you can modify an event, like click, by appending '.something' to it. For ex @click.shift="toggleModal" will modify the click event and only work if shift key is pressed. Same for @click.right="toggleModal" for right click.
@click.self="closeModal" will allow to close our modal only if we click on the backdrop itself, and not if we click on the opened modal.

Slots help us pass templates into components. For example if we want to pass a complete form, we can't do it with props. We need slots. To pass slots, instead of having a one line self-closing component in our template, like
<Modal  theme="sale" @close="toggleModal" />
we now need to open up the tag
<Modal  theme="sale" @close="toggleModal">
</Modal>
and insert stuff inside. So, for ex:
<Modal>
    <p>This is a template, and this is a slot!</p>
</Modal>
Then in our modal component, we can just pass <slot></slot> where we want in our template, to use the slot from App.vue.

We can also use slot names to point towards specific slots and use more than 1 slot.
<template v-slot:links> -> we name the slot 'links' in App.vue and access it through <slot name="links"></slot> in Modal.vue (our component).
We can also put some default content in our slot in our component, like <slot>Default content</slot>, and that only shows if we haven't defined a default slot in the parent component.



Teleport:
We can use <teleport to=".modals"></teleport> instead of div in App.vue templates to teleport the modals into <div class="modals"></div> in index.html. In this case we use a class ".modals" as reference, but we could have used an id="modals" and reference to="#modals".


Lifecycle hooks:
https://v3.vuejs.org/guide/instance.html#lifecycle-hooks
https://v3.vuejs.org/guide/instance.html#lifecycle-diagram


Get data (variable for ex) from a child component back up to the parent component?
In child component:
this.$emit('end', this.reactionTime)
In parent:
<Block @end="endGame" />
and
methods: {
    endGame(reactionTime) {do stuff}
}

